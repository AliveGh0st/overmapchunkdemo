name: Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  comprehensive-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install analysis tools
        run: |
          pip install flake8 pylint bandit safety
          npm install -g eslint jshint

      - name: Analyze changed files
        id: analyze
        run: |
          # 获取变更文件
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > changed_files.txt
          else
            git diff --name-only HEAD~1 HEAD > changed_files.txt
          fi
          
          analysis_report=""
          
          # 分析不同类型的文件
          echo "## 📊 代码质量分析报告" > analysis_report.md
          echo "" >> analysis_report.md
          
          # GDScript 文件分析
          gdscript_files=$(grep '\.gd$' changed_files.txt || true)
          if [ -n "$gdscript_files" ]; then
            echo "### 🎮 GDScript 文件" >> analysis_report.md
            echo "$gdscript_files" | while read -r file; do
              if [ -f "$file" ]; then
                echo "#### 📄 $file" >> analysis_report.md
                
                # 简单的代码质量检查
                lines=$(wc -l < "$file")
                echo "- **行数**: $lines" >> analysis_report.md
                
                # 检查常见问题
                if grep -q "print(" "$file"; then
                  echo "- ⚠️ 包含调试输出语句" >> analysis_report.md
                fi
                
                if grep -q "TODO\|FIXME\|HACK" "$file"; then
                  echo "- 📝 包含待办事项或临时修复" >> analysis_report.md
                fi
                
                # 检查函数复杂度（简单版本）
                func_count=$(grep -c "^func " "$file" || echo "0")
                echo "- **函数数量**: $func_count" >> analysis_report.md
                
                if [ $lines -gt 500 ]; then
                  echo "- ⚠️ 文件较长，考虑拆分" >> analysis_report.md
                fi
                
                echo "" >> analysis_report.md
              fi
            done
          fi
          
          # Python 文件分析（如果有）
          python_files=$(grep '\.py$' changed_files.txt || true)
          if [ -n "$python_files" ]; then
            echo "### 🐍 Python 文件" >> analysis_report.md
            echo "$python_files" | while read -r file; do
              if [ -f "$file" ]; then
                echo "#### 📄 $file" >> analysis_report.md
                
                # Flake8 检查
                flake8_output=$(flake8 "$file" --max-line-length=100 2>/dev/null || echo "无问题")
                if [ "$flake8_output" != "无问题" ]; then
                  echo "**风格问题**:" >> analysis_report.md
                  echo '```' >> analysis_report.md
                  echo "$flake8_output" >> analysis_report.md
                  echo '```' >> analysis_report.md
                else
                  echo "- ✅ 代码风格良好" >> analysis_report.md
                fi
                
                # 安全检查
                bandit_output=$(bandit -f txt "$file" 2>/dev/null || echo "无安全问题")
                if [[ "$bandit_output" == *"No issues identified"* ]] || [ "$bandit_output" = "无安全问题" ]; then
                  echo "- ✅ 无安全问题" >> analysis_report.md
                else
                  echo "**安全问题**:" >> analysis_report.md
                  echo '```' >> analysis_report.md
                  echo "$bandit_output" >> analysis_report.md
                  echo '```' >> analysis_report.md
                fi
                
                echo "" >> analysis_report.md
              fi
            done
          fi
          
          # JavaScript/TypeScript 文件分析
          js_files=$(grep -E '\.(js|ts)$' changed_files.txt || true)
          if [ -n "$js_files" ]; then
            echo "### 📜 JavaScript/TypeScript 文件" >> analysis_report.md
            echo "$js_files" | while read -r file; do
              if [ -f "$file" ]; then
                echo "#### 📄 $file" >> analysis_report.md
                
                # JSHint 检查
                jshint_output=$(jshint "$file" 2>/dev/null || echo "JSHint 检查完成")
                if [[ "$jshint_output" != *"error"* ]] && [ "$jshint_output" = "JSHint 检查完成" ]; then
                  echo "- ✅ 代码质量良好" >> analysis_report.md
                else
                  echo "**代码问题**:" >> analysis_report.md
                  echo '```' >> analysis_report.md
                  echo "$jshint_output" >> analysis_report.md
                  echo '```' >> analysis_report.md
                fi
                
                echo "" >> analysis_report.md
              fi
            done
          fi
          
          # 添加通用建议
          echo "### 💡 通用建议" >> analysis_report.md
          echo "- 确保所有新功能都有适当的注释" >> analysis_report.md
          echo "- 考虑添加单元测试覆盖新代码" >> analysis_report.md
          echo "- 检查是否需要更新文档" >> analysis_report.md
          echo "- 确保遵循项目的编码规范" >> analysis_report.md
          echo "" >> analysis_report.md
          
          echo "### 📈 提交统计" >> analysis_report.md
          total_files=$(wc -l < changed_files.txt)
          echo "- **变更文件数**: $total_files" >> analysis_report.md
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            additions=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | awk '{sum+=$1} END {print sum}')
            deletions=$(git diff --numstat ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | awk '{sum+=$2} END {print sum}')
          else
            additions=$(git diff --numstat HEAD~1 HEAD | awk '{sum+=$1} END {print sum}')
            deletions=$(git diff --numstat HEAD~1 HEAD | awk '{sum+=$2} END {print sum}')
          fi
          
          echo "- **新增行数**: ${additions:-0}" >> analysis_report.md
          echo "- **删除行数**: ${deletions:-0}" >> analysis_report.md
          
          # 设置输出
          echo "analysis_report<<EOF" >> $GITHUB_OUTPUT
          cat analysis_report.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.analyze.outputs.analysis_report }}`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

      - name: Comment on Commit
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.analyze.outputs.analysis_report }}`;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: report
            });
